{"version":3,"sources":["app.js","auth/signin.js","auth/signup.js","auth/userlinks.js","history/history.js","define/define.js","logs/logs.js","authinterceptor.js","currentuser.js","define.service.js","logs.service.js","sessiontoken.js","users.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function(){\n\tvar app = angular.module('workoutlog',[\n\t\t'ui.router',\n\t\t'workoutlog.define',\n\t\t'workoutlog.logs',\n\t\t'workoutlog.history',\n\t\t'workoutlog.feed',\n\t\t'workoutlog.auth.signup',\n\t\t'workoutlog.auth.signin'\n\t])\n\t.factory('socket', function(socketFactory){\n\t\tvar myIoSocket = io.connect('http://localhost:3000');\n\t\tvar socket = socketFactory({\n\t\t\tioSocket: myIoSocket\n\t\t});\n\t\treturn socket;\n\t});\n\tfunction config($urlRouterProvider){\n\t\t$urlRouterProvider.otherwise('/signin');\n\t}\n\t// $inject: directive form angular to inject dependecies\n\tconfig.$inject = ['$urlRouterProvider'];\n\tapp.config(config);\n\t// var API_BASE is now dynamic and the WorkoutLog-Angular can run deployed or locally because the ternary operator determines the environment and alters the API_BASE accordingly\n\tvar API_BASE = location.hostname === \"localhost\" ?\n\t\t\"//localhost:3000/api/\" : \"//gutbuster-api.herokuapp.com/api/\";\n\tapp.constant('API_BASE', API_BASE);\n})();","(function(){\n\tangular\n\t\t.module('workoutlog.auth.signin', ['ui.router'])\n\t\t.config(signinConfig);\n\n\t\tfunction signinConfig($stateProvider){\n\t\t\t$stateProvider\n\t\t\t\t.state('signin',{\n\t\t\t\t\turl: '/signin',\n\t\t\t\t\ttemplateUrl: '/components/auth/signin.html',\n\t\t\t\t\tcontroller: SignInController,\n\t\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\t\tbindToController: this\n\t\t\t\t});\n\t\t}\n\n\t\tsigninConfig.$inject = ['$stateProvider'];\n\n\t\tfunction SignInController($state, UsersService){\n\t\t\tvar vm = this;\n\t\t\tvm.user = {};\n\t\t\tvm.login = function(){\n\t\t\t\tUsersService.login(vm.user).then(function(response){\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t$state.go('define');\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\tSignInController.$inject = ['$state', 'UsersService'];\n})();","(function(){\n\tangular\n\t\t.module('workoutlog.auth.signup', ['ui.router'])\n\t\t.config(signupConfig);\n\n\t\t// $stateProvider is from ui-router and is the method through which url routing is handled.\n\t\tfunction signupConfig($stateProvider){\n\t\t\t$stateProvider\n\t\t\t\t// defines this component as the state of signup and provides the url route\n\t\t\t\t.state('signup',{\n\t\t\t\t\turl: '/signup',\n\t\t\t\t\t// templateUrl is the html the component will use\n\t\t\t\t\ttemplateUrl: '/components/auth/signup.html',\n\t\t\t\t\t// controller indicates which controller will dictate the behavior of this view\n\t\t\t\t\tcontroller: SignUpController,\n\t\t\t\t\t// controllerAs creates an alias so a developer doesn’t have to type SignUpController.<function or object>\n\t\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\t\t// bindToController binds the scope of the view to the scope of this controller and eliminates the need to use $scope\n\t\t\t\t\tbindToController: this\n\t\t\t\t});\n\t\t}\n\n\t\tsignupConfig.$inject = ['$stateProvider'];\n\n\t\t// SignUpController has $state and UsersService injected into it\n\t\tfunction SignUpController($state, UsersService){\n\t\t\t// var vm = this; is how the binding of the controller to the view is completed\n\t\t\tvar vm = this;\n\t\t\t// vm.user = {}; establishes an object to build the username and password inside\n\t\t\tvm.user = {};\n\t\t\t// vm.message = “Sign up for an account!” is an example of expressions and how vm and this scope work together.\n\t\t\tvm.message = \"Sign up for an account!!!!!!! WSEFKNvkfdlvc\";\n\t\t\tvm.submit = function(){\n\t\t\t\t// ng-model and ng-submit create the vm.user object that UserService.create uses to sign a new user up to our application\n\t\t\t\t// .then is how the SignUpController handles the resolved promise and then routes the app to the define feature of the WorkoutLog\n\t\t\t\tUsersService.create(vm.user).then(function(response){\n\t\t\t\t\t// This display the response data in the console for Chrome Dev Tools\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t// $state.go(‘define’) is how ui-route changes from state (url) to other states\n\t\t\t\t\t$state.go('define');\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\tSignUpController.$inject = ['$state', 'UsersService'];\n})();","// this will be the js file that “powers” the custom directive\n(function(){\n\tangular.module('workoutlog')\n\t.directive('userlinks',\n\tfunction(){\n\t\tUserLinksController.$inject = ['$state', 'CurrentUser', 'SessionToken'];\n\t\tfunction UserLinksController($state, CurrentUser, SessionToken){\n\t\t\tvar vm = this;\n\t\t\tvm.user = function(){\n\t\t\t\treturn CurrentUser.get();\n\t\t\t};\n\t\t\tvm.signedIn = function(){\n\t\t\t\treturn !!(vm.user().id);\n\t\t\t};\n\t\t\tvm.logout = function(){\n\t\t\t\tCurrentUser.clear();\n\t\t\t\tSessionToken.clear();\n\t\t\t\t$state.go('signin');\n\t\t\t};\n\t\t}\n\n\t\t// This is where the directive is configured. It is similar to the configuration of the other components. One item to note is the scope: {}; creates an isolated scope. This isolates the data to that portion of the application\n\t\treturn{\n\t\t\tscope: {},\n\t\t\tcontroller: UserLinksController,\n\t\t\tcontrollerAs: 'ctrl',\n\t\t\tbindToController: true,\n\t\t\ttemplateUrl: '/components/auth/userlinks.html',\n\t\t};\n\t});\n})();","// \tNotice how LogsService is injected and then implemented in this controller.  The history component is used to present the collection of logs.  Look inside vm.updateLog, $state.go has the route as the first argument but the second argument is an object with an id property.  This is how logs.js ‘knows” which log to get so it can be updated.\n\n(function(){\n\tangular.module('workoutlog.history', [\n\t\t'ui.router'\n\t]) \n\t.config(historyConfig)\n\thistoryConfig.$inject = ['$stateProvider'];\n\t\n\tfunction historyConfig($stateProvider){\n\t\t$stateProvider\n\t\t\t.state('history',{\n\t\t\t\turl: '/history',\n\t\t\t\ttemplateUrl: '/components/history/history.html',\n\t\t\t\tcontroller: HistoryController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this,\n\t\t\t\tresolve: {\n\t\t\t\t\tgetUserLogs: [\n\t\t\t\t\t\t'LogsService',\n\t\t\t\t\t\tfunction(LogsService){\n\t\t\t\t\t\t\treturn LogsService.fetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tHistoryController.$inject = ['$state', 'LogsService'];\n\n\tfunction HistoryController($state, LogsService){\n\t\tvar vm = this;\n\t\tvm.history = LogsService.getLogs();\n\t\tvm.delete = function(item){\n\t\t\tLogsService.deleteLogs(item);\n\t\t};\n\t\tvm.updateLog = function(item) {\n\t\t\t$state.go('logs/update', { 'id': item.id});\n\t\t};\n\t}\n})();","(function(){\n\tangular.module('workoutlog.define', [\n\t\t'ui.router'\n\t]) \n\t.config(defineConfig)\n\t\n\tfunction defineConfig($stateProvider){\n\t\t$stateProvider\n\t\t\t.state('define',{\n\t\t\t\turl: '/define',\n\t\t\t\ttemplateUrl: '/components/define/define.html',\n\t\t\t\tcontroller: DefineController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this,\n\t\t\t\tresolve: [\n\t\t\t\t\t'CurrentUser', '$q', '$state',\n\t\t\t\t\tfunction(CurrentUser, $q, $state){\n\t\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\t\tif (CurrentUser.isSignedIn()){\n\t\t\t\t\t\t\tdeferred.resolve();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t\t\t$state.go('signin');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn deferred.promise;\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})\n\t};\n\n\tdefineConfig.$inject = ['$stateProvider'];\n\n\tfunction DefineController($state, DefineService){\n\t\tvar vm = this;\n\t\tvm.message = \"Define a workout category here\";\n\t\tvm.saved = false; \n\t\tvm.definition = {};\n\t\tvm.save = function() {\n\t\t\tDefineService.save(vm.definition)\n\t\t\t\t.then(function(){\n\t\t\t\t\tvm.saved = true;\n\t\t\t\t\t$state.go('logs')\n\t\t\t\t});\n\t\t};\n\t}\n\tDefineController.$inject = ['$state', 'DefineService'];\n})();","(function(){\n\tangular.module('workoutlog.logs', [\n\t\t'ui.router'\n\t])\n\t.config(logsConfig);\n\n\tlogsConfig.$inject = ['$stateProvider'];\n\tfunction logsConfig($stateProvider){\n\t\t$stateProvider\n\t\t\t.state('logs',{\n\t\t\t\turl: '/logs',\n\t\t\t\ttemplateUrl: '/components/logs/logs.html',\n\t\t\t\tcontroller: LogsController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this,\n\t\t\t\tresolve: {\n\t\t\t\t\tgetUserDefinitions: [\n\t\t\t\t\t\t'DefineService',\n\t\t\t\t\t\tfunction(DefineService){\n\t\t\t\t\t\t\treturn DefineService.fetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t})\n\t\t\t//  Notice in the .state(‘logs/update’) the ‘/:id’.  This is the variable that is passed to $stateParams.id. Notice on the .state(‘logs/update’) that there are two functions that occur on the resolve.  This allows the route to have access to the data of the log being edited.  Also note, that the resolve is getting all user definitions of a workout.\n\t\t\t.state('logs/update', {\n\t\t\t\turl: '/logs/:id', \n\t\t\t\ttemplateUrl: '/components/logs/log-update.html',\n\t\t\t\tcontroller: LogsController,\n\t\t\t\tcontrollerAs: 'ctrl',\n\t\t\t\tbindToController: this,\n\t\t\t\tresolve: {\n\t\t\t\t\tgetSingleLog: function($stateParams, LogsService){\n\t\t\t\t\t\t// $stateParams.id allows the application to pass the url and use that as a way to identify an individual workout.  Notice in the .state(‘logs/update’) the ‘/:id’.  This is the variable that is passed to $stateParams.id.\n\t\t\t\t\t\treturn LogsService.fetchOne($stateParams.id);\n\t\t\t\t\t},\n\t\t\t\t\tgetUserDefinitions: function(DefineService){\n\t\t\t\t\t\treturn DefineService.fetch();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t//how building the log\n\tLogsController.$inject = ['$state', 'DefineService', 'LogsService'];\n\tfunction LogsController($state, DefineService, LogsService){\n\t\tvar vm = this;\n\t\tvm.saved = false;\n\t\tvm.log = {};\n\t\t// should return defs that weve made. if not seeing, this is worng\n\t\tvm.userDefinitions = DefineService.getDefinitions();\n\t\tvm.updateLog = LogsService.getLog();\n\t\tvm.save = function(){\n\t\t\tLogsService.save(vm.log)\n\t\t\t\t.then(function(){\n\t\t\t\t\tvm.saved = true;\n\t\t\t\t\t$state.go('history');\n\t\t\t\t});\n\t\t};\n\n\t\t// create an update function here. rebuilding\n\t\tvm.updateSingleLog = function() {\n\t\t\tvar logToUpdate = {\n\t\t\t\tid: vm.updateLog.id,\n\t\t\t\tdesc: vm.updateLog.description,\n\t\t\t\tresult: vm.updateLog.result,\n\t\t\t\tdef: vm.updateLog.def\n\t\t\t}\n\t\t\tLogsService.updateLog(logToUpdate)\n\t\t\t\t.then(function(){\n\t\t\t\t\t$state.go('history');\n\t\t\t\t});\n\t\t};\n\t}\n})();","(function(){\n\tangular.module('workoutlog')\n\t\t.factory('AuthInterceptor', ['SessionToken', 'API_BASE',\n\t\t\tfunction(SessionToken, API_BASE){\n\t\t\t\treturn {\n\t\t\t\t\trequest: function(config){\n\t\t\t\t\t\tvar token = SessionToken.get();\n\t\t\t\t\t\tif (token && config.url.indexOf(API_BASE) > -1){\n\t\t\t\t\t\t\t// has config.headers - this is where the token that is generated on successful account creations(signup) and logging in (signin) are attached to each ajax request. The if statement above is essentially checking to see if there is a token and a url of API_BASE. Both of these are set in other files.\n\t\t\t\t\t\t\tconfig.headers['Authorization'] = token;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn config;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t]);\n\tangular.module('workoutlog')\n\t\t// $httpProvider has an array that executes each interceptor that the Angular framework runs and also what a developer has custom built for specific applications.\n\t\t// $httpProvider are interceptors as methods to filter http requests\n\t\t.config(['$httpProvider', function($httpProvider){\n\t\t\treturn $httpProvider.interceptors.push('AuthInterceptor');\n\t\t}\n\t]);\n})();","(function(){\n\tangular.module('workoutlog')\n\t\t//  JavaScript has a window object but it is a global variable.  This makes testing and maintenance difficult.  $window is Angular’s window object and helps increase testing and maintenance by controlling the scope.\n\t\t// the CU is name of service. can call w/e\n\t\t.service('CurrentUser', ['$window', function($window){\n\t\t\t// declares and define sessiontoken()\n\t\t\tfunction CurrentUser(){\n\t\t\t\t// looks inside browers lS and grabs in of cU prop and setting to variable called currU\n\t\t\t\tvar currUser = $window.localStorage.getItem('currentUser');\n\t\t\t\tif (currUser && currUser !== \"undefined\"){\n\t\t\t\t\tthis.currentUser = JSON.parse($window.localStorage.getItem('currentUser'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tCurrentUser.prototype.set = function(user){\n\t\t\t\tthis.currentUser = user;\n\t\t\t\t$window.localStorage.setItem('currentUser', JSON.stringify(user));\n\t\t\t};\n\t\t\tCurrentUser.prototype.get = function(){\n\t\t\t\treturn this.currentUser || {};\n\t\t\t};\n\t\t\tCurrentUser.prototype.clear = function(){\n\t\t\t\tthis.currentUser = undefined;\n\t\t\t\t$window.localStorage.removeItem('currentUser');\n\t\t\t};\n\t\t\tCurrentUser.prototype.isSignedIn = function(){\n\t\t\t\t// !! ensures that isSignedIn flips the boolean correctly. think through what occurs when a user signs in and how the use of a boolean could indicate that in code.\n\t\t\t\treturn !!this.get().id;\n\t\t\t}\n\t\t\treturn new CurrentUser();\n\t\t}]);\n})();","(function(){\n\tangular.module('workoutlog')\n\t\t//  JavaScript has a window object but it is a global variable.  This makes testing and maintenance difficult.  $window is Angular’s window object and helps increase testing and maintenance by controlling the scope.\n\t\t// the CU is name of service. can call w/e\n\t\t.service('DefineService', DefineService);\n\t\t\n\t\tDefineService.$inject = ['$http', 'API_BASE'];\n\t\tfunction DefineService($http, API_BASE){\n\t\t\tvar defineService = this;\n\t\t\tdefineService.userDefinitions = [];\n\t\t\t\n\t\t\tdefineService.save = function(definition){\n\t\t\t\treturn $http.post(API_BASE + 'definition',{\n\t\t\t\t\tdefinition: definition\n\t\t\t\t}).then(function(response){\n\t\t\t\t\t// unshift is lke push but puts data at front of array, not back. sutff gets sabed into array\n\t\t\t\t\tdefineService.userDefinitions.unshift(response.data);\n\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\tconsole.log(defineService.userDefinitions);\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\tdefineService.fetch = function(definition){\n\t\t\t\treturn $http.get(API_BASE + 'definition')\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\tdefineService.userDefinitions = response.data;\n\t\t\t\t\t})\n\t\t\t};\n\n\t\t\tdefineService.getDefinitions = function(){\n\t\t\t\treturn defineService.userDefinitions;\n\t\t\t}\n\t\t};\n})();","// obj get built and send ot db\n(function(){\n\tangular.module('workoutlog')\n\t\t.service('LogsService', LogsService);\n\n\t\tLogsService.$inject = ['$http', 'API_BASE'];\n\t\tfunction LogsService($http, API_BASE, DefineService){\n\t\t\tvar logsService = this;\n\t\t\tlogsService.workouts = [];\n\t\t\tlogsService.individualLog = {};\n\t\t\t// saves the log\n\t\t\tlogsService.save = function(log){\n\t\t\t\t// buuilds like postman. gets sent to server\n\t\t\t\treturn $http.post(API_BASE + 'log',{\n\t\t\t\t\tlog: log\n\t\t\t\t}).then(function(response){\n\t\t\t\t\tlogsService.workouts.push(response);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tlogsService.fetch = function(log){\n\t\t\t\treturn $http.get(API_BASE + 'log')\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\tlogsService.workouts = response.data;\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\tlogsService.getLogs = function(){\n\t\t\t\treturn logsService.workouts;\n\t\t\t};\n\n\t\t\tlogsService.deleteLogs = function(log){\n\t\t\t\tvar logIndex = logsService.workouts.indexOf(log);\n\t\t\t\tlogsService.workouts.splice(logIndex, 1);\n\t\t\t\tvar deleteData = {log: log};\n\t\t\t\treturn $http({\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\turl: API_BASE + \"log\",\n\t\t\t\t\tdata: JSON.stringify(deleteData),\n\t\t\t\t\theaders: {\"Content-Type\": \"application/json\"}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tlogsService.fetchOne = function(log){\n\t\t\t\t// console.log(log);\n\t\t\t\treturn $http.get(API_BASE + 'log/' +log)\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\tlogsService.individualLog = response.data;\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\tlogsService.getLog = function(){\n\t\t\t\treturn logsService.individualLog;\n\t\t\t};\n\n\t\t\tlogsService.updateLog = function(logToUpdate){\n\t\t\t\treturn $http.put(API_BASE + 'log', {log: logToUpdate});\n\t\t\t}\n\t\t}\n})();","(function(){\n\tangular.module('workoutlog')\n\t\t//  JavaScript has a window object but it is a global variable.  This makes testing and maintenance difficult.  $window is Angular’s window object and helps increase testing and maintenance by controlling the scope.\n\t\t.service('SessionToken', ['$window', function($window){\n\t\t\t// declares and define sessiontoken()\n\t\t\tfunction SessionToken(){\n\t\t\t\tthis.sessionToken = $window.localStorage.getItem('sessionToken');\n\t\t\t}\n\t\t\tSessionToken.prototype.set = function(token){\n\t\t\t\tthis.sessionToken = token;\n\t\t\t\t$window.localStorage.setItem('sessionToken', token);\n\t\t\t};\n\t\t\tSessionToken.prototype.get = function(){\n\t\t\t\treturn this.sessionToken;\n\t\t\t};\n\t\t\tSessionToken.prototype.clear = function(){\n\t\t\t\tthis.sessionToken = undefined;\n\t\t\t\t$window.localStorage.removeItem('sessionToken');\n\t\t\t};\n\t\t\treturn new SessionToken();\n\t\t}]);\n})();","// handles the http request to create and / or signin a user\n(function(){\n\tangular.module('workoutlog')\n\t\t.service('UsersService', [\n\t\t\t'$http', 'API_BASE', 'SessionToken', 'CurrentUser',\n\t\t\tfunction($http, API_BASE, SessionToken, CurrentUser){\n\t\t\t\tfunction UsersService(){\n\n\t\t\t\t}\n\t\t\t\tUsersService.prototype.create = function(user){\n\t\t\t\t\tvar userPromise = $http.post(API_BASE + 'user', {\n\t\t\t\t\t\tuser: user\n\t\t\t\t\t});\n\t\t\t\t\tuserPromise.then(function(response){\n\t\t\t\t\t\tSessionToken.set(response.data.sessionToken);\n\t\t\t\t\t\tCurrentUser.set(response.data.user);\n\t\t\t\t\t});\n\t\t\t\t\treturn userPromise;\n\t\t\t\t};\n\t\t\t\tUsersService.prototype.login = function(user){\n\t\t\t\t\tvar loginPromise = $http.post(API_BASE + 'login', {\n\t\t\t\t\t\tuser: user\n\t\t\t\t\t})\n\t\t\t\t\tloginPromise.then(function(response){\n\t\t\t\t\t\tSessionToken.set(response.data.sessionToken);\n\t\t\t\t\t\tCurrentUser.set(response.data.user);\n\t\t\t\t\t})\n\t\t\t\t\treturn loginPromise;\n\t\t\t\t};\n\t\t\treturn new UsersService();\n\t\t}]);\n})();"]}